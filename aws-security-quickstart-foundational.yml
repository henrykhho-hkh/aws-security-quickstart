AWSTemplateFormatVersion: "2010-09-09"
Description: AWS Security Quickstart - Foundational

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          default: AWS Config
        Parameters: 
          - EnableAWSConfigEvaluation
      - Label:
          default: Amazon Inspector
        Parameters:
          - EnableAmazonInspector
      - Label:
          default: AWS Backup
        Parameters:
          - EnableAWSBackup
          - EnableDailyBackup
          - EnableWeeklyBackup
      - Label:
          default: AWS Systems Manager
        Parameters:
          - EnableFleetManager
      - Label:
          default: Network Segmentations
        Parameters:
          - EnableNetworkSegmentation
          - EnvironmentName
          - VpcCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR

#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Parameters:
  ## AWS Config - Evaluation
  EnableAWSConfigEvaluation: 
    AllowedValues: 
      - "true"
      - "false"
    Default: "true"
    Description: "Enable AWS Config with Managed Rules to assess, audit, and evaluate configurations of your resources."
    Type: String
  
  ## Amazon Inspector
  EnableAmazonInspector:
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
    Description: "Enable Amazon Inspector for vulnerability assessment and network accessibility."
    Type: String
  
  ## AWS Backup
  EnableAWSBackup:
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
    Description: "Enable AWS Backup to backup your common AWS resources."
    Type: String
  EnableDailyBackup:
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
    Description: "Enable daily backup at 00:00 every night with 35 days retention period for your common AWS resources."
    Type: String
  EnableWeeklyBackup:
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
    Description: "Enable weekly backup at 00:00 every Sunday night with 1 year retention period for your common AWS resources."
    Type: String
  
  ## AWS Systems Manager
  EnableFleetManager:
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
    Description: "Enable Fleet Manager to manage your nodes."
    Type: String
  
  ## Amazon VPC
  EnableNetworkSegmentation:
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
    Description: "Create network segments in a new Amazon VPC"
    Type: String
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24
  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24
  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24
  
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Conditions: 
  AWSConfigEvaluationEnabled: !Equals
    - !Ref EnableAWSConfigEvaluation
    - "true"
  AmazonInspectorEnabled: !Equals
    - !Ref EnableAmazonInspector
    - "true"
  AWSBackupEnabled: !Equals
    - !Ref EnableAWSBackup
    - "true"
  DailyBackupEnabled: !Equals
    - !Ref EnableDailyBackup
    - "true"
  WeeklyBackupEnabled: !Equals
    - !Ref EnableWeeklyBackup
    - "true"
  FleetManagerEnabled: !Equals
    - !Ref EnableFleetManager
    - "true"
  NetworkSegmentEnabled: !Equals
    - !Ref EnableNetworkSegment
    - "true"

#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Resources:
## AWS Config - Evaluation
## services evaluated: EC2, EBS, RDS and S3
## protections evaluated: encryption, backup, managed instances
  ConfigRuleForEncryptedEBSVolumes:
    Condition: AWSConfigEvaluationEnabled
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "encrypted-volumes"
      Scope:
        ComplianceResourceTypes:
          - "AWS::EC2::Volume"
      Source:
        Owner: "AWS"
        SourceIdentifier: "ENCRYPTED_VOLUMES"
  ConfigRuleForEncryptedRDSInstances:
    Condition: AWSConfigEvaluationEnabled
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "rds-storage-encrypted"
      Scope:
        ComplianceResourceTypes:
          - "AWS::RDS::DBInstance"
      Source:
        Owner: "AWS"
        SourceIdentifier: "RDS_STORAGE_ENCRYPTED"
  ConfigRuleForEncryptedS3Buckets:
    Condition: AWSConfigEvaluationEnabled
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "s3-default-encryption-kms"
      Scope:
        ComplianceResourceTypes:
          - "AWS::S3::Bucket"
      Source:
        Owner: "AWS"
        SourceIdentifier: "S3_DEFAULT_ENCRYPTION_KMS"
  ConfigRuleForCommonPorts:
    Condition: AWSConfigEvaluationEnabled
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "restricted-common-ports"
      Scope:
        ComplianceResourceTypes:
          - "AWS::EC2::SecurityGroup"
      Source:
        Owner: "AWS"
        SourceIdentifier: "RESTRICTED_INCOMING_TRAFFIC"
  ConfigRuleForFleetManager:
    Condition: FleetManagerEnabled
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "ec2-instance-managed-by-systems-manager"
      Scope:
        ComplianceResourceTypes:
          - "AWS::EC2::Instance"
          - "AWS::SSM::ManagedInstanceInventory"
      Source:
        Owner: "AWS"
        SourceIdentifier: "EC2_INSTANCE_MANAGED_BY_SSM"
  ConfigRuleForEC2BackupPlan:
    Condition: AWSBackupEnabled
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "ec2-resources-protected-by-backup-plan"
      MaximumExecutionFrequency: "TwentyFour_Hours"
      InputParameters: { "resourceTags": "backup_enabled" }
      Source:
        Owner: "AWS"
        SourceIdentifier: "EC2_RESOURCES_PROTECTED_BY_BACKUP_PLAN"
  ConfigRuleForEBSBackupPlan:
    Condition: AWSBackupEnabled
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "ebs-resources-protected-by-backup-plan"
      MaximumExecutionFrequency: "TwentyFour_Hours"
      InputParameters: { "resourceTags": "backup_enabled" }
      Source:
        Owner: "AWS"
        SourceIdentifier: "EBS_RESOURCES_PROTECTED_BY_BACKUP_PLAN"
  ConfigRuleForRDSBackupPlan:
    Condition: AWSBackupEnabled
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "rds-resources-protected-by-backup-plan"
      MaximumExecutionFrequency: "TwentyFour_Hours"
      InputParameters: { "resourceTags": "backup_enabled" }
      Source:
        Owner: "AWS"
        SourceIdentifier: "RDS_RESOURCES_PROTECTED_BY_BACKUP_PLAN"
  ConfigRuleForS3BackupPlan:
    Condition: AWSBackupEnabled
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "s3-resources-protected-by-backup-plan"
      MaximumExecutionFrequency: "TwentyFour_Hours"
      InputParameters: { "resourceTags": "backup_enabled" }
      Source:
        Owner: "AWS"
        SourceIdentifier: "S3_RESOURCES_PROTECTED_BY_BACKUP_PLAN"

## Amazon Inspector
## Step 1 - Create Lambda role for enabling Amazon Inspector
  AmazonInspectorEnablementLambdaRole:
    Condition: AmazonInspectorEnabled
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "AmazonInspectorInlinePolicy"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "inspector2:Disable"
                  - "inspector2:Enable"
                Resource: "*"
        - PolicyName: "IAMInlinePolicy"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "iam:CreateServiceLinkedRole"
                Resource: "*"
                Condition:
                  StringEquals:
                    "iam:AWSServiceName": "inspector2.amazonaws.com"
      Tags:
        - Key: "source"
          Value: "aws-security-quickstart-foundational"

## Step 2 - Create the Lambda function to enable Amazon Inspector
  AmazonInspectorEnablementLambdaFunction:
    Condition: AmazonInspectorEnabled
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          'use strict';
          const AWS = require('aws-sdk');
          const inspector2 = new AWS.Inspector2();
          const response = require('./cfn-response');
          exports.handler = (event, context, cb) => {
            
            const account_id = JSON.stringify(context.invokedFunctionArn).split(':')[4]    
            
            console.log('Invoke:', JSON.stringify(event));
            
            const done = (err, data) => {
              if (err) {
                console.log('Error: ', err);
                response.send(event, context, response.FAILED, {}, 'CustomResourcePhysicalID');
              } else {
                response.send(event, context, response.SUCCESS, {}, 'CustomResourcePhysicalID');
              }
            };
            if ( event.RequestType === 'Delete') {
              inspector2.disable({accountIds: [account_id], resourceTypes:["EC2", "ECR"]}, done);
            } else if (event.RequestType === 'Create' || event.RequestType === 'Update') {
              inspector2.enable({accountIds: [account_id], resourceTypes:["EC2", "ECR"]}, done);
            } else {
              cb(new Error('unsupported RequestType: ', event.RequestType));
              response.send(event, context, response.FAILED, {}, 'CustomResourcePhysicalID');
            }
          };
      Handler: "index.handler"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "AmazonInspectorEnablementLambdaRole"
          - "Arn"
      Runtime: "nodejs14.x"
      Timeout: 120
      Tags:
        - Key: "source"
          Value: "aws-security-quickstart-foundational"
  
## Step 3 - Enable Amazon Isnpector with CloudFormation custom resource
  EnablingAmazonInspector:
    Condition: AmazonInspectorEnabled
    Type: "Custom::EnablingAmazonInspector"
    Properties:
      ServiceToken: !GetAtt AmazonInspectorEnablementLambdaFunction.Arn

## AWS Backups
## Step 1 - Create Backup Vaults for Daily and Weekly Backups, using AWS Managed Key for encryption. And create IAM role to be used by AWS Backup.
  BackupVaultWithDailyBackups:
    Condition: DailyBackupEnabled
    Type: AWS::Backup::BackupVault
    Properties:
      BackupVaultName: "BackupVaultWithDailyBackups"
  BackupVaultWithWeeklyBackups:
    Condition: WeeklyBackupEnabled
    Type: AWS::Backup::BackupVault
    Properties:
      BackupVaultName: "BackupVaultWithWeeklyBackups"
  BackupRole:
    Condition: AWSBackupEnabled
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "backup.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup"
      Tags:
        - Key: "source"
          Value: "aws-security-quickstart-foundational"
      
## Step 2 - Create backup plans
  BackupPlanWithDailyBackups:
    Condition: DailyBackupEnabled  
    Type: AWS::Backup::BackupPlan
    DependsOn: BackupVaultWithDailyBackups
    Properties:
      BackupPlan:
        BackupPlanName: "BackupPlanWithDailyBackups"
        BackupPlanRule:
          - RuleName: "RuleForDailyBackups"
            TargetBackupVault: !Ref BackupVaultWithDailyBackups
            ScheduleExpression: "cron(0 16 ? * * *)"
            Lifecycle:
              DeleteAfterDays: 35
      BackupPlanTags:
              { "source": "aws-security-quickstart-foundational" }
  BackupPlanWithWeeklyBackups:
    Condition: WeeklyBackupEnabled
    Type: AWS::Backup::BackupPlan
    DependsOn: BackupVaultWithWeeklyBackups      
    Properties:
      BackupPlan:
        BackupPlanName: "BackupPlanWithWeeklyBackups"
        BackupPlanRule:
          - RuleName: "RuleForWeeklyBackups"
            TargetBackupVault: !Ref BackupVaultWithWeeklyBackups
            ScheduleExpression: "cron(0 16 ? * SAT *)"
            Lifecycle:
              DeleteAfterDays: 365
      BackupPlanTags:
              { "source": "aws-security-quickstart-foundational" }
    
## Step 3 - Tag based backup
  DailyBackupSelectionByTags:
    Type: AWS::Backup::BackupSelection
    DependsOn: BackupPlanWithDailyBackups
    Properties: 
      BackupPlanId: !Ref BackupPlanWithDailyBackups
      BackupSelection: 
        SelectionName: "daily-backup-selection"
        IamRoleArn: !GetAtt BackupRole.Arn
        ListOfTags:
          - ConditionType: "STRINGEQUALS"
            ConditionKey: "aws:ResourceTag/backup_enabled"
            ConditionValue: "yes"
          - ConditionType: "STRINGEQUALS"
            ConditionKey: "aws:ResourceTag/backup_frequency"
            ConditionValue: "daily"
  WeeklyBackupSelectionByTags:
    Type: AWS::Backup::BackupSelection
    DependsOn: BackupPlanWithWeeklyBackups
    Properties: 
      BackupPlanId: !Ref BackupPlanWithWeeklyBackups
      BackupSelection: 
        SelectionName: "weekly-backup-selection"
        IamRoleArn: !GetAtt BackupRole.Arn
        ListOfTags:
          - ConditionType: "STRINGEQUALS"
            ConditionKey: "aws:ResourceTag/backup_enabled"
            ConditionValue: "yes"
          - ConditionType: "STRINGEQUALS"
            ConditionKey: "aws:ResourceTag/backup_frequency"
            ConditionValue: "weekly"

## Systems Manager - Fleet Manager
## Step 1 - Create EC2 instance profile with SSM
  SecurityQuickStartSSMRoleForInstances:
    Condition: FleetManagerEnabled
    Type: AWS::IAM::Role
    Properties: 
      RoleName: "DO-NOT-DELETE-SecurityQuickStartSSMRoleForInstances"
      Description: "IAM Role created for SSM instance profile"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/AmazonSSMPatchAssociation"
      Tags: 
        - Key: "source"
          Value: "aws-security-quickstart-foundational"
  SecurityQuickStartSSMInstanceProfile:
    DependsOn: SecurityQuickStartSSMRoleForInstances
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: "SecurityQuickStartInstanceProfile"
      Roles: 
        - !Ref SecurityQuickStartSSMRoleForInstances
  EventBridgeIAMRoleTriggerSSM:
    Condition: FleetManagerEnabled
    Type: AWS::IAM::Role
    Properties: 
      RoleName: "DO-NOT-DELETE-EventBridgeIAMRoleTriggerSSM"
      Description: "IAM Role for EventBridge to trigger SSM Automation"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "SecurityQuickStart-EventBridgeExecutionRole"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action: 
                  - "ssm:StartAutomationExecution"
                Resource: 
                  - !Sub "arn:aws:ssm:*:*:automation-definition/AWS-AttachIAMToInstance:*"
              - Effect: "Allow"
                Action:
                  - "iam:PassRole"
                Resource: "*"
      Tags: 
        - Key: "source"
          Value: "aws-security-quickstart-foundational"
  SSMAutomationRoleForInstanceProfileSetup:
    Condition: FleetManagerEnabled
    Type: AWS::IAM::Role
    Properties: 
      RoleName: "DO-NOT-DELETE-SSMAutomationRoleForInstanceProfileSetup"
      Description: "IAM Role for SSM to attach IAM instance profile to EC2"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ssm.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "SecurityQuickStart-InstanceProfileSetupPolicy"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action: 
                  - "ec2:DisassociateIamInstanceProfile"
                  - "ec2:AssociateIamInstanceProfile"
                  - "ec2:DescribeIamInstanceProfileAssociations"
                  - "iam:CreateInstanceProfile"
                  - "iam:ListInstanceProfilesForRole"
                  - "iam:GetInstanceProfile"
                  - "iam:AddRoleToInstanceProfile"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "iam:PassRole"
                Resource: "*"
      Tags: 
        - Key: "source"
          Value: "aws-security-quickstart-foundational"

##Step 2 - Create Eventbridge rule
  EventBridgeTriggerSSMInstanceProfileSetup:
    Condition: FleetManagerEnabled
    Type: AWS::Events::Rule
    Properties: 
      Description: "Event rule to trigger SSM instance profile attachment on EC2"
      Name: "SecurityQuickStart-EventbridgeSetupInstanceProfile"
      EventBusName: "default"
      EventPattern:
        source:
          - "aws.ec2"
        detail-type:
          - "EC2 Instance State-change Notification"
        detail:
          state:
            - "running"
      State: "ENABLED"
      Targets: 
        - Arn: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/AWS-AttachIAMToInstance:$DEFAULT"
          Id: "1"
          RoleArn: !GetAtt EventBridgeIAMRoleTriggerSSM.Arn
          InputTransformer:
            InputPathsMap:
                "instance": "$.detail.instance-id"
            InputTemplate: !Sub
              - |
                {
                  "AutomationAssumeRole": ["${AutomationRole}"],
                  "RoleName": ["DO-NOT-DELETE-SecurityQuickStartSSMRoleForInstances"],
                  "ForceReplace": ["false"],
                  "InstanceId": [<instance>]
                }
              -  AutomationRole: !GetAtt SSMAutomationRoleForInstanceProfileSetup.Arn

## Network Segmentations and Multi-AZs
  SegmentedVPC:
    Type: AWS::EC2::VPC
    Condition: NetworkSegmentEnabled
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName        
        - Key: "source"
          Value: "aws-security-quickstart-foundational"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: SegmentedVPC
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
        - Key: "source"
          Value: "aws-security-quickstart-foundational"
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: SegmentedVPC
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref SegmentedVPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: SegmentedVPC
    Properties:
      VpcId: !Ref SegmentedVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
        - Key: "source"
          Value: "aws-security-quickstart-foundational"
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: SegmentedVPC
    Properties:
      VpcId: !Ref SegmentedVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
        - Key: "source"
          Value: "aws-security-quickstart-foundational"
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: SegmentedVPC
    Properties:
      VpcId: !Ref SegmentedVPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
        - Key: "source"
          Value: "aws-security-quickstart-foundational"
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: SegmentedVPC
    Properties:
      VpcId: !Ref SegmentedVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)
        - Key: "source"
          Value: "aws-security-quickstart-foundational"
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  NatGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: SegmentedVPC
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
  NatGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn: SegmentedVPC
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: SegmentedVPC
    Properties:
      VpcId: !Ref SegmentedVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes
        - Key: "source"
          Value: "aws-security-quickstart-foundational"
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    DependsOn: SegmentedVPC
    Properties:
      VpcId: !Ref SegmentedVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)
        - Key: "source"
          Value: "aws-security-quickstart-foundational"
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    DependsOn: SegmentedVPC
    Properties:
      VpcId: !Ref SegmentedVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)
        - Key: "source"
          Value: "aws-security-quickstart-foundational"
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: SegmentedVPC
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref SegmentedVPC

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref SegmentedVPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup


            